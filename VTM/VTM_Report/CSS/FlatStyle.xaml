<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--Button-->
    <!--Template-->

    <ControlTemplate x:Key="ButtonControlNonHoverBackground" TargetType="{x:Type Button}">
        <Border x:Name="border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Cursor="Hand"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" TargetName="border" Value="0,0,0,2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
                <Setter Property="BorderThickness" TargetName="border" Value="3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FF121212"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ButtonControlNonHoverEffect" TargetType="{x:Type Button}">
        <Grid Height="{TemplateBinding Height}">
            <Ellipse x:Name="backgroundEllipse" Width="0" Height="0" Fill="#4F808080" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="#01000000" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Cursor="Hand"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#4F808080"/>
            </Trigger>
            <!--<EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" To="0" SpeedRatio="3"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:1" To="0" SpeedRatio="3"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>-->
            <!--<EventTrigger RoutedEvent="Button.Click">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard AutoReverse="True">
                            <DoubleAnimation Duration="0:0:1" From="0" To="370" SpeedRatio="5"
                                             DecelerationRatio="0.1"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:1" From="0" To="200" SpeedRatio="5"
                                             AccelerationRatio="0.1"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="Gray"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="border" CornerRadius="0" Height="40" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#01000000">
            <Grid>
                <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Cursor="Hand"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#4F808080"/>
            </Trigger>
            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <!--<DoubleAnimation Duration="0:0:1" From="40" To="300" SpeedRatio="1"
                                             DecelerationRatio="0.1"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>-->
                            <DoubleAnimation Duration="0:0:1" To="100" SpeedRatio="4"
                                             AccelerationRatio="0.1"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <!--<DoubleAnimation Duration="0:0:1" To="0" SpeedRatio="3"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>-->
                            <DoubleAnimation Duration="0:0:1" To="40" SpeedRatio="4"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToggleButtonVertical" TargetType="{x:Type ToggleButton}">
        <Border x:Name="border" CornerRadius="0" Width="50" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#01000000">
            <Grid>
                <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Cursor="Hand"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#4F808080"/>
            </Trigger>
            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" To="100" SpeedRatio="4"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>
                            <!--<DoubleAnimation Duration="0:0:1" From="40" To="100" SpeedRatio="4"
                                             AccelerationRatio="0.1"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>-->
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" To="50" SpeedRatio="4"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Width" >
                            </DoubleAnimation>
                            <!--<DoubleAnimation Duration="0:0:1" To="40" SpeedRatio="4"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height" >
                            </DoubleAnimation>-->
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#121212"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToggleButtonSwitchContent" TargetType="{x:Type ToggleButton}">
        <Border x:Name="border" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#01000000">
            <Grid>
                <Ellipse x:Name="backgroundEllipse" Width="0" Height="0" Fill="Black" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Cursor="Hand"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{x:Null}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#4F808080"/>
            </Trigger>
            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
  
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>

                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--Button-->

    <!--Data grid-->
    <!--Style-->

    <Style x:Key="FlatDataGridHeaderNomal" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" >
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#151515"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="FlatDataGridHeaderConstance" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" >
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#151515"/>
        <Setter Property="Foreground" Value="Yellow"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="FlatDataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" Margin="0,0,0,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="FlatDataGridCellConstance" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Yellow"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="DarkCyan"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatVTMCell" BasedOn="{StaticResource FlatDataGridCell}" TargetType="DataGridCell">
        <Style.Triggers >
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="DarkCyan"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="FlatVTMCellCMD" BasedOn="{StaticResource FlatDataGridCellConstance}" TargetType="DataGridCell">
        <Style.Triggers >
            <DataTrigger Binding="{Binding CMD}" Value="MAK">
                <Setter Property="Background" Value="Cyan"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="FlatVTMCellConstance" BasedOn="{StaticResource FlatDataGridCellConstance}" TargetType="DataGridCell">
        <Style.Triggers >

            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="VTMDataGridCellMode" TargetType="{x:Type DataGridCell}"  BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Mode}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="VTMDataGridCellCount" TargetType="{x:Type DataGridCell}"  BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Count}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="VTMDataGridCellMax" TargetType="{x:Type DataGridCell}"  BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Max}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VTMDataGridCellMin" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Min}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VTMDataGridCellSpec" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Spect}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="VTMDataGridCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="VTMDataGridCellOper" TargetType="{x:Type DataGridCell}"  BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Oper}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="VTMDataGridCellCondition2" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Condition2}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VTMDataGridCellCondition1" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" >
        <Style.Triggers >
            <DataTrigger Binding="{Binding CMD}" Value="MAK">
                <Setter Property="Background" Value="Cyan"/>
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Condition1}" Value="not use">
                <Setter Property="Background" Value="DarkGray"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True" >
                <Setter Property="Background" Value="Gray"/>
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True" >
                <Setter Property="Background" Value="#3261AF"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatRowDataGrid" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="IsEditing" Value="True">
                <Setter Property="Background" Value="DarkCyan"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Vertical"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#302E2E"/>
        <Setter Property="VerticalGridLinesBrush" Value="#302E2E"/>
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="ColumnHeaderHeight" Value="25"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="AlternatingRowBackground" Value="#FF444444"/>
        <Setter Property="RowBackground" Value="#AF444444"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CellStyle" Value="{StaticResource FlatDataGridCell}"/>
        <Setter Property="RowStyle" Value="{StaticResource FlatRowDataGrid}"/>
    </Style>


    <!--Data grid-->

    <!--Progress Bar-->
    <Style x:Key="ProgressBarStyle" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border Background="#202020" CornerRadius="10" Padding="1" Margin="0,0,0,0">
                        <Grid x:Name="PART_Track" >
                            <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" RadiusX="0" RadiusY="0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF075B07" Offset="1"/>
                                        <GradientStop Color="#FF04EE04"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Scroll Bar-->
    <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
    <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
    <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    <SolidColorBrush x:Key="NormalBrush" Color="#888" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FF686868" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />

    <LinearGradientBrush x:Key="ListBoxBackgroundBrush" StartPoint="0,0" EndPoint="1,0.001">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="White" Offset="0.0" />
                <GradientStop Color="White" Offset="0.6" />
                <GradientStop Color="#DDDDDD" Offset="1.2"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="StandardBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="1" CornerRadius="2" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Black" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="8" Margin="0,0,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHor" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Height="8" Margin="0,0,-2,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="0"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="0"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
            <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" CornerRadius="2" Background="{x:Null}"/>
            <RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHor}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="10" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="1"/>
                        <ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Scroll Bar-->


    <Style x:Key="ContentLabelStyle" TargetType="Label">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <Storyboard  x:Key="LabelSlide">
        <Storyboard>
            <ThicknessAnimation
                    Storyboard.TargetProperty="(Label.Margin)"
                    From="300,2,2,2" To="2"
                    SpeedRatio="2"/>
        </Storyboard>
    </Storyboard>
    
    
    
    
    
    
    <!--TapControl-->

    <Style x:Key="FlatTabControl" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="Border" BorderThickness="0,0,0,2" BorderBrush="White" CornerRadius="0" Margin="0,0,0,-1" Background="#01000000" Height="Auto">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,5"
                                        />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#222222"/>
                            <Setter TargetName="Border" Property="Background" Value="#222222"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="FlatTabControlLeft" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="Border" BorderThickness="0,0,4,0" BorderBrush="White" CornerRadius="0" Margin="0,0,0,-1" Background="#01000000" Height="Auto">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,5"
                                        />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#222222"/>
                            <Setter TargetName="Border" Property="Background" Value="#222222"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
<!--CheckBox-->
    <Style x:Name="checkBoxShadow" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                       Width="18"
                                        Height="18"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="2"
                                       ClipToBounds="True">
                                <Path x:Name="CheckMark"
                                          Width="15"
                                          Height="10"
                                          HorizontalAlignment="Stretch"
                                          VerticalAlignment="Stretch"
                                          Data="M1,5L4,9 M4,9L11,0"
                                          Stretch="None"
                                          Stroke="#55A6DD"
                                          StrokeEndLineCap="Round"
                                          StrokeStartLineCap="Round"
                                          StrokeThickness="3"></Path>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="5,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"></ContentPresenter>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="Gray" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>