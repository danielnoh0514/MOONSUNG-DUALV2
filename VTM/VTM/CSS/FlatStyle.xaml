<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--  Button  -->
    <!--  Template  -->

    <ControlTemplate x:Key="ButtonControlNonHoverBackground" TargetType="{x:Type Button}">
        <Border
            x:Name="border"
            Background="{TemplateBinding Background}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">
            <ContentPresenter
                x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding Content}"
                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                Cursor="Hand"
                Focusable="False"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="#d6d6d6" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
                <Setter TargetName="border" Property="BorderThickness" Value="3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ButtonControlNonHoverEffect" TargetType="{x:Type Button}">
        <Grid Height="{TemplateBinding Height}">
            <Ellipse
                x:Name="backgroundEllipse"
                Width="0"
                Height="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Fill="#4F808080" />
            <Border
                x:Name="border"
                Background="#01000000"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="0"
                SnapsToDevicePixels="True">
                <ContentPresenter
                    x:Name="contentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Cursor="Hand"
                    Focusable="False"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{x:Null}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="#4F808080" />
            </Trigger> 
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#d6d6d6" />
                <Setter TargetName="border" Property="BorderBrush" Value="Black" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ToggleButton" TargetType="{x:Type ToggleButton}">
        <Border
            x:Name="border"
            Height="40"
            Background="#01000000"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="0">
            <Grid>
                <ContentPresenter
                    x:Name="contentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Cursor="Hand"
                    Focusable="False"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{x:Null}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="#4F808080" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="Background" Value="#002e5b"/>

            </Trigger>

            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <!--<DoubleAnimation Duration="0:0:1" From="40" To="300" SpeedRatio="1"
                                             DecelerationRatio="0.1"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Width">
                            </DoubleAnimation>-->
                            <DoubleAnimation
                                AccelerationRatio="0.1"
                                SpeedRatio="4"
                                Storyboard.TargetName="border"
                                Storyboard.TargetProperty="Height"
                                To="100"
                                Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <!--<DoubleAnimation Duration="0:0:1" To="0" SpeedRatio="3"
                                             Storyboard.Target="{Binding ElementName=backgroundEllipse}"
                                             Storyboard.TargetProperty="Width">
                            </DoubleAnimation>-->
                            <DoubleAnimation
                                SpeedRatio="4"
                                Storyboard.TargetName="border"
                                Storyboard.TargetProperty="Height"
                                To="40"
                                Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#FFF4F4F4" />
                <Setter TargetName="border" Property="BorderBrush" Value="#FFADB2B5" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToggleButtonVertical" TargetType="{x:Type ToggleButton}">
        <Border
            x:Name="border"
            Width="50"
            Background="#01000000"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="0">
            <Grid>
                <ContentPresenter
                    x:Name="contentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Cursor="Hand"
                    Focusable="False"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{x:Null}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="#4F808080" />
            </Trigger>
            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                SpeedRatio="4"
                                Storyboard.TargetName="border"
                                Storyboard.TargetProperty="Width"
                                To="100"
                                Duration="0:0:1" />
                            <!--<DoubleAnimation Duration="0:0:1" From="40" To="100" SpeedRatio="4"
                                             AccelerationRatio="0.1"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height">
                            </DoubleAnimation>-->
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                SpeedRatio="4"
                                Storyboard.TargetName="border"
                                Storyboard.TargetProperty="Width"
                                To="50"
                                Duration="0:0:1" />
                            <!--<DoubleAnimation Duration="0:0:1" To="40" SpeedRatio="4"
                                             Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Height">
                            </DoubleAnimation>-->
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#FFF4F4F4" />
                <Setter TargetName="border" Property="BorderBrush" Value="#FFADB2B5" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="Background" Value="#b6b6b6" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToggleButtonSwitchContent" TargetType="{x:Type ToggleButton}">
        <Border
            x:Name="border"
            Background="#01000000"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="0">
            <Grid>
                <Ellipse
                    x:Name="backgroundEllipse"
                    Width="0"
                    Height="0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="Black" />
                <ContentPresenter
                    x:Name="contentPresenter"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding Content}"
                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Cursor="Hand"
                    Focusable="False"
                    RecognizesAccessKey="True"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="Background" Value="{x:Null}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="#4F808080" />
            </Trigger>
            <EventTrigger RoutedEvent="ToggleButton.Checked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard />
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard />
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Background" Value="#FFF4F4F4" />
                <Setter TargetName="border" Property="BorderBrush" Value="#FFADB2B5" />
                <Setter Property="Foreground" Value="#FF838383" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--  Button  -->

    <!--  Data grid  -->
    <!--  Style  -->

    <Style x:Key="FlatDataGridHeaderNomal" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="10,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#c6c6c6" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="FlatDataGridHeaderConstance" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
                        <ContentPresenter
                            Margin="10,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#c6c6c6" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Height" Value="40" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="FlatDataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="0,0,0,0" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatDataGridCellConstance" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="FlatVTMCell"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="FlatVTMCellCMD"
        BasedOn="{StaticResource FlatDataGridCellConstance}"
        TargetType="DataGridCell">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding CMD}" Value="MAK">
                <Setter Property="Background" Value="Cyan" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="FlatVTMCellConstance"
        BasedOn="{StaticResource FlatDataGridCellConstance}"
        TargetType="DataGridCell">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellMode"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Mode}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellCount"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Count}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellMax"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Max}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellMin"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Min}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellSpec"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Spect}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCell"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellOper"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Oper}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellCondition2"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Visibility" Value="Visible" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Condition2}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="VTMDataGridCellCondition1"
        BasedOn="{StaticResource FlatDataGridCell}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="White" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=CommandDescriptions.Condition1}" Value="not use">
                <Setter Property="Background" Value="#d6d6d6" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding CMD}" Value="MAK">
                <Setter Property="Background" Value="Cyan" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Skip}" Value="True">
                <Setter Property="Background" Value="#d6d6d6" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#3261AF" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatRowDataGrid" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="#d6d6d6" />
        <Style.Triggers>
            <Trigger Property="IsEditing" Value="True">
                <Setter Property="Background" Value="DarkCyan" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FlatDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="GridLinesVisibility" Value="Vertical" />
        <Setter Property="HorizontalGridLinesBrush" Value="#302E2E" />
        <Setter Property="VerticalGridLinesBrush" Value="#302E2E" />
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ColumnHeaderHeight" Value="25" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CellStyle" Value="{StaticResource FlatVTMCell}" />
        <Setter Property="RowStyle" Value="{StaticResource FlatRowDataGrid}" />
    </Style>

    <!--  Data grid  -->

    <!--  Progress Bar  -->
    <Style x:Key="ProgressBarStyle" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border
                        Margin="0,0,0,0"
                        Padding="1"
                        Background="#f6f6f6"
                        CornerRadius="0">
                        <Grid x:Name="PART_Track">
                            <Rectangle
                                x:Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                RadiusX="0"
                                RadiusY="0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="1" Color="#FF075B07" />
                                        <GradientStop Color="#FF04EE04" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Scroll Bar  -->
    <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
    <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#d6d6d6" />
    <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    <SolidColorBrush x:Key="NormalBrush" Color="#888" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FF686868" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />

    <LinearGradientBrush x:Key="ListBoxBackgroundBrush" StartPoint="0,0" EndPoint="1,0.001">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="White" />
                <GradientStop Offset="0.6" Color="White" />
                <GradientStop Offset="1.2" Color="#DDDDDD" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="StandardBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#FFF" />
                <GradientStop Offset="1.0" Color="#CCC" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0.0" Color="#BBB" />
                <GradientStop Offset="0.1" Color="#EEE" />
                <GradientStop Offset="0.9" Color="#EEE" />
                <GradientStop Offset="1.0" Color="#FFF" />
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        Name="Border"
                        Margin="1"
                        Background="{StaticResource NormalBrush}"
                        BorderBrush="{StaticResource NormalBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="2">
                        <Path
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{StaticResource GlyphBrush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Black" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Width="8"
                        Margin="0,0,0,0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        CornerRadius="4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHor" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Height="8"
                        Margin="0,0,-2,0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        CornerRadius="4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="0" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="0" />
            </Grid.RowDefinitions>
            <Border
                Grid.RowSpan="3"
                Background="Transparent"
                CornerRadius="2" />
            <RepeatButton
                Grid.Row="0"
                Height="18"
                Command="ScrollBar.LineUpCommand"
                Content="M 0 4 L 8 4 L 4 0 Z"
                Style="{StaticResource ScrollBarLineButton}" />
            <Track
                Name="PART_Track"
                Grid.Row="1"
                IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        Margin="1,0,1,0"
                        Background="{StaticResource HorizontalNormalBrush}"
                        BorderBrush="{StaticResource HorizontalNormalBorderBrush}"
                        Style="{StaticResource ScrollBarThumb}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Grid.Row="3"
                Height="18"
                Command="ScrollBar.LineDownCommand"
                Content="M 0 0 L 4 4 L 8 0 Z"
                Style="{StaticResource ScrollBarLineButton}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border
                Grid.ColumnSpan="3"
                Background="{x:Null}"
                CornerRadius="2" />
            <RepeatButton
                Grid.Column="0"
                Width="18"
                Command="ScrollBar.LineLeftCommand"
                Content="M 4 0 L 4 8 L 0 4 Z"
                Style="{StaticResource ScrollBarLineButton}" />
            <Track
                Name="PART_Track"
                Grid.Column="1"
                IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        Margin="0,1,0,1"
                        Background="{StaticResource NormalBrush}"
                        BorderBrush="{StaticResource NormalBorderBrush}"
                        Style="{StaticResource ScrollBarThumbHor}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Grid.Column="3"
                Width="18"
                Command="ScrollBar.LineRightCommand"
                Content="M 0 0 L 4 4 L 0 8 Z"
                Style="{StaticResource ScrollBarLineButton}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="10" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="1" />
                        <ScrollBar
                            Name="PART_VerticalScrollBar"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{TemplateBinding VerticalOffset}" />
                        <ScrollBar
                            Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="1"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Orientation="Horizontal"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{TemplateBinding HorizontalOffset}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Scroll Bar  -->

    <Style x:Key="ContentLabelStyle" TargetType="Label">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Storyboard x:Key="LabelSlide">
        <Storyboard>
            <ThicknessAnimation
                SpeedRatio="2"
                Storyboard.TargetProperty="(Label.Margin)"
                From="300,2,2,2"
                To="2" />
        </Storyboard>
    </Storyboard>

    <!--  TapControl  -->

    <Style x:Key="SubFlatTabControl" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border
                        x:Name="Border"
                        Height="Auto"
                        Margin="0,0,0,-1"
                        Background="#01000000"
                        BorderBrush="White"
                        BorderThickness="0,0,0,2"
                        CornerRadius="0">
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="10,5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Background" Value="White"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#d6d6d6" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#b6b6b6" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Black"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#b6b6b6" />
                            <Setter TargetName="Border" Property="Background" Value="#b6b6b6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatTabControl" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border
                        x:Name="Border"
                        Height="Auto"
                        Margin="0,0,0,-1"
                        Background="#01000000"
                        BorderBrush="White"
                        BorderThickness="0,0,0,2"
                        CornerRadius="0">
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="10,5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">

                            <Setter TargetName="Border" Property="BorderBrush" Value="#d6d6d6" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#c1c1c1" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                           
                            <Setter TargetName="Border" Property="BorderBrush" Value="#c1c1c1" />
                            <Setter TargetName="Border" Property="Background" Value="#c1c1c1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlatTabControlLeft" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    
                    <Border
                        x:Name="Border"
                        Height="Auto"
                        Margin="0,0,0,-1"
                        Background="#01000000"
                        BorderBrush="White"
                        BorderThickness="0,0,4,0"

                        CornerRadius="0">
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="10,5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsSelected" Value="False">

                            <Setter TargetName="Border" Property="BorderBrush" Value="#b6b6b6" />
                            <Setter TargetName="Border" Property="Background" Value="#000000ff" />
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#003a71" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#003a71" />
                            <Setter TargetName="Border" Property="Background" Value="#003a71" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  CheckBox  -->
    <Style x:Name="checkBoxShadow" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="#d6d6d6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="18"
                                Height="18"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="2"
                                ClipToBounds="True">
                                <Path
                                    x:Name="CheckMark"
                                    Width="15"
                                    Height="10"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Data="M1,5L4,9 M4,9L11,0"
                                    Stretch="None"
                                    Stroke="#55A6DD"
                                    StrokeEndLineCap="Round"
                                    StrokeStartLineCap="Round"
                                    StrokeThickness="3" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="5,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="#d6d6d6" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="#d6d6d6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>