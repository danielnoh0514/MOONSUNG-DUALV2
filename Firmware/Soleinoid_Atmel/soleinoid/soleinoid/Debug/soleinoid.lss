
soleinoid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000037a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b80  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ae  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c5  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000465  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a0 31       	cpi	r26, 0x10	; 16
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  90:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <xor8_checksum>:
	update_outputs();
}

void uart0_send(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
  98:	ac 01       	movw	r20, r24
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <xor8_checksum+0x18>
  a2:	fa 01       	movw	r30, r20
  a4:	e2 0f       	add	r30, r18
  a6:	f3 1f       	adc	r31, r19
  a8:	90 81       	ld	r25, Z
  aa:	89 27       	eor	r24, r25
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	26 17       	cp	r18, r22
  b2:	37 07       	cpc	r19, r23
  b4:	b0 f3       	brcs	.-20     	; 0xa2 <xor8_checksum+0xa>
  b6:	08 95       	ret

000000b8 <clock_aware_delay_us>:
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <clock_aware_delay_us+0xc>
  be:	00 00       	nop
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	d0 f3       	brcs	.-12     	; 0xbe <clock_aware_delay_us+0x6>
  ca:	08 95       	ret

000000cc <init_ports>:
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	84 bf       	out	0x34, r24	; 52
  d0:	84 bf       	out	0x34, r24	; 52
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	1b ba       	out	0x1b, r1	; 27
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	80 6f       	ori	r24, 0xF0	; 240
  dc:	84 bb       	out	0x14, r24	; 20
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 6e       	ori	r24, 0xE0	; 224
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	08 95       	ret

000000ec <init_uart>:
  ec:	10 bc       	out	0x20, r1	; 32
  ee:	87 e4       	ldi	r24, 0x47	; 71
  f0:	89 b9       	out	0x09, r24	; 9
  f2:	88 e1       	ldi	r24, 0x18	; 24
  f4:	8a b9       	out	0x0a, r24	; 10
  f6:	86 e8       	ldi	r24, 0x86	; 134
  f8:	80 bd       	out	0x20, r24	; 32
  fa:	08 95       	ret

000000fc <write_to_ic>:
  fc:	6b bb       	out	0x1b, r22	; 27
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	79 f0       	breq	.+30     	; 0x120 <write_to_ic+0x24>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	c1 f0       	breq	.+48     	; 0x136 <write_to_ic+0x3a>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	01 f5       	brne	.+64     	; 0x14a <write_to_ic+0x4e>
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	85 bb       	out	0x15, r24	; 21
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <clock_aware_delay_us>
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	08 95       	ret
 120:	85 b3       	in	r24, 0x15	; 21
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	85 bb       	out	0x15, r24	; 21
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5c 00 	call	0xb8	; 0xb8 <clock_aware_delay_us>
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	80 64       	ori	r24, 0x40	; 64
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
 136:	85 b3       	in	r24, 0x15	; 21
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <clock_aware_delay_us>
 144:	85 b3       	in	r24, 0x15	; 21
 146:	80 62       	ori	r24, 0x20	; 32
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret

0000014c <update_outputs>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	c2 e0       	ldi	r28, 0x02	; 2
 152:	d1 e0       	ldi	r29, 0x01	; 1
 154:	68 81       	ld	r22, Y
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 7e 00 	call	0xfc	; 0xfc <write_to_ic>
 15c:	69 81       	ldd	r22, Y+1	; 0x01
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 7e 00 	call	0xfc	; 0xfc <write_to_ic>
 164:	6a 81       	ldd	r22, Y+2	; 0x02
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 7e 00 	call	0xfc	; 0xfc <write_to_ic>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <validate_frame>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	fc 01       	movw	r30, r24
 178:	20 81       	ld	r18, Z
 17a:	24 34       	cpi	r18, 0x44	; 68
 17c:	b1 f4       	brne	.+44     	; 0x1aa <validate_frame+0x38>
 17e:	21 81       	ldd	r18, Z+1	; 0x01
 180:	25 34       	cpi	r18, 0x45	; 69
 182:	a9 f4       	brne	.+42     	; 0x1ae <validate_frame+0x3c>
 184:	21 85       	ldd	r18, Z+9	; 0x09
 186:	26 35       	cpi	r18, 0x56	; 86
 188:	a1 f4       	brne	.+40     	; 0x1b2 <validate_frame+0x40>
 18a:	22 81       	ldd	r18, Z+2	; 0x02
 18c:	26 30       	cpi	r18, 0x06	; 6
 18e:	99 f4       	brne	.+38     	; 0x1b6 <validate_frame+0x44>
 190:	23 81       	ldd	r18, Z+3	; 0x03
 192:	23 35       	cpi	r18, 0x53	; 83
 194:	91 f4       	brne	.+36     	; 0x1ba <validate_frame+0x48>
 196:	ec 01       	movw	r28, r24
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 4c 00 	call	0x98	; 0x98 <xor8_checksum>
 1a0:	98 85       	ldd	r25, Y+8	; 0x08
 1a2:	89 17       	cp	r24, r25
 1a4:	61 f0       	breq	.+24     	; 0x1be <validate_frame+0x4c>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <validate_frame+0x4e>
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <validate_frame+0x4e>
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <validate_frame+0x4e>
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <validate_frame+0x4e>
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <validate_frame+0x4e>
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <validate_frame+0x4e>
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <send_response>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <send_response+0x6>
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <send_response+0x8>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <send_response+0xa>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	94 e4       	ldi	r25, 0x44	; 68
 1d6:	99 83       	std	Y+1, r25	; 0x01
 1d8:	95 e4       	ldi	r25, 0x45	; 69
 1da:	9a 83       	std	Y+2, r25	; 0x02
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	9b 83       	std	Y+3, r25	; 0x03
 1e0:	8c 83       	std	Y+4, r24	; 0x04
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 4c 00 	call	0x98	; 0x98 <xor8_checksum>
 1ee:	8d 83       	std	Y+5, r24	; 0x05
 1f0:	86 e5       	ldi	r24, 0x56	; 86
 1f2:	8e 83       	std	Y+6, r24	; 0x06
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 1f8:	5d 9b       	sbis	0x0b, 5	; 11
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <send_response+0x32>
 1fc:	e1 e0       	ldi	r30, 0x01	; 1
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	e8 0f       	add	r30, r24
 206:	f1 1d       	adc	r31, r1
 208:	90 81       	ld	r25, Z
 20a:	9c b9       	out	0x0c, r25	; 12
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	86 30       	cpi	r24, 0x06	; 6
 210:	98 f3       	brcs	.-26     	; 0x1f8 <send_response+0x32>
 212:	26 96       	adiw	r28, 0x06	; 6
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <process_frame>:
 224:	dc 01       	movw	r26, r24
 226:	e2 e0       	ldi	r30, 0x02	; 2
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	14 96       	adiw	r26, 0x04	; 4
 22c:	8c 91       	ld	r24, X
 22e:	14 97       	sbiw	r26, 0x04	; 4
 230:	80 83       	st	Z, r24
 232:	15 96       	adiw	r26, 0x05	; 5
 234:	8c 91       	ld	r24, X
 236:	15 97       	sbiw	r26, 0x05	; 5
 238:	81 83       	std	Z+1, r24	; 0x01
 23a:	16 96       	adiw	r26, 0x06	; 6
 23c:	8c 91       	ld	r24, X
 23e:	82 83       	std	Z+2, r24	; 0x02
 240:	0e 94 a6 00 	call	0x14c	; 0x14c <update_outputs>
 244:	08 95       	ret

00000246 <receive_frame>:

void receive_frame(void) {
	static uint8_t receiving = 0;
	static uint8_t bytes_received = 0;
	
	if((UCSR0A & (1 << RXC0))) {
 246:	5f 9b       	sbis	0x0b, 7	; 11
 248:	3a c0       	rjmp	.+116    	; 0x2be <receive_frame+0x78>
		uint8_t data = UDR0;	
 24a:	8c b1       	in	r24, 0x0c	; 12
		
		//uart0_send(data);	
		
		if(!receiving) {
 24c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <receiving.1801>
 250:	91 11       	cpse	r25, r1
 252:	22 c0       	rjmp	.+68     	; 0x298 <receive_frame+0x52>
			// Wait for header
			if(bytes_received == 0 && data == HEADER_BYTE1) {
 254:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	e1 11       	cpse	r30, r1
 25a:	0b c0       	rjmp	.+22     	; 0x272 <receive_frame+0x2c>
 25c:	84 34       	cpi	r24, 0x44	; 68
 25e:	49 f4       	brne	.+18     	; 0x272 <receive_frame+0x2c>
				uart_buffer[bytes_received++] = data;
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	9e 0f       	add	r25, r30
 264:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ea 5f       	subi	r30, 0xFA	; 250
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret
			}
			else if(bytes_received == 1 && data == HEADER_BYTE2) {
 272:	e1 30       	cpi	r30, 0x01	; 1
 274:	71 f4       	brne	.+28     	; 0x292 <receive_frame+0x4c>
 276:	85 34       	cpi	r24, 0x45	; 69
 278:	61 f4       	brne	.+24     	; 0x292 <receive_frame+0x4c>
				uart_buffer[bytes_received++] = data;
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	9e 0f       	add	r25, r30
 27e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ea 5f       	subi	r30, 0xFA	; 250
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 83       	st	Z, r24
				receiving = 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <receiving.1801>
 290:	08 95       	ret
			}
			else {
				bytes_received = 0;  // Reset if header not matched
 292:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 296:	08 95       	ret
			}
			
		}
		else {
			// Store received byte
			uart_buffer[bytes_received++] = data;
 298:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9e 0f       	add	r25, r30
 2a0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ea 5f       	subi	r30, 0xFA	; 250
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 83       	st	Z, r24
			
			// Check if complete frame received
			if(bytes_received >= FRAME_LENGTH) {
 2ac:	9a 30       	cpi	r25, 0x0A	; 10
 2ae:	38 f0       	brcs	.+14     	; 0x2be <receive_frame+0x78>
				receiving = 0;
 2b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <receiving.1801>
				bytes_received = 0;
 2b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				frame_ready = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frame_ready>
 2be:	08 95       	ret

000002c0 <main>:
	}
}

int main(void) {
	// System initialization
	init_ports();
 2c0:	0e 94 66 00 	call	0xcc	; 0xcc <init_ports>
	init_uart();
 2c4:	0e 94 76 00 	call	0xec	; 0xec <init_uart>

	// Initialize default values
	output_values[0] = 0x00;
 2c8:	e2 e0       	ldi	r30, 0x02	; 2
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	10 82       	st	Z, r1
	output_values[1] = 0x00;
 2ce:	11 82       	std	Z+1, r1	; 0x01
	output_values[2] = 0x00;
 2d0:	12 82       	std	Z+2, r1	; 0x02
	update_outputs();
 2d2:	0e 94 a6 00 	call	0x14c	; 0x14c <update_outputs>
	
	while(1) {
		// Poll for incoming UART data
		
		receive_frame();
 2d6:	0e 94 23 01 	call	0x246	; 0x246 <receive_frame>
		
		// Process frame if ready
		if(frame_ready) {
 2da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <frame_ready>
 2de:	88 23       	and	r24, r24
 2e0:	d1 f3       	breq	.-12     	; 0x2d6 <main+0x16>
			uint8_t validation_result = validate_frame(uart_buffer);
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 b9 00 	call	0x172	; 0x172 <validate_frame>
 2ea:	c8 2f       	mov	r28, r24
			// Send response
			send_response(validation_result);
 2ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <send_response>
			//
			// Process only if valid
			if(validation_result == ACK_SUCCESS) {
 2f0:	c1 30       	cpi	r28, 0x01	; 1
 2f2:	21 f4       	brne	.+8      	; 0x2fc <main+0x3c>
				process_frame(uart_buffer);
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 12 01 	call	0x224	; 0x224 <process_frame>
			}
			// Reset flag
			frame_ready = 0;
 2fc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <frame_ready>
 300:	ea cf       	rjmp	.-44     	; 0x2d6 <main+0x16>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
