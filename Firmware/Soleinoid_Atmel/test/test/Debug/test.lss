
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fc  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 82 00 	call	0x104	; 0x104 <main>
  80:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <init_ports>:
void enable_output() {
	PORTC &= ~(1 << OE_PIN);
}

void disable_output() {
	PORTC |= (1 << OE_PIN);
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	84 bf       	out	0x34, r24	; 52
  8c:	84 bf       	out	0x34, r24	; 52
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
  92:	84 bb       	out	0x14, r24	; 20
  94:	85 b3       	in	r24, 0x15	; 21
  96:	80 61       	ori	r24, 0x10	; 16
  98:	85 bb       	out	0x15, r24	; 21
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	8f 7d       	andi	r24, 0xDF	; 223
  aa:	85 bb       	out	0x15, r24	; 21
  ac:	08 95       	ret

000000ae <send_data_1>:
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	00 00       	nop
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	85 bb       	out	0x15, r24	; 21
  be:	00 00       	nop
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret

000000c8 <send_data_2>:
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	00 00       	nop
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	00 00       	nop
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	85 bb       	out	0x15, r24	; 21
  e0:	08 95       	ret

000000e2 <send_data_3>:
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	00 00       	nop
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	00 00       	nop
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8f 7d       	andi	r24, 0xDF	; 223
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	08 95       	ret

000000fc <enable_output>:
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 bb       	out	0x15, r24	; 21
 102:	08 95       	ret

00000104 <main>:
}

int main(void) {
	init_ports();
 104:	0e 94 44 00 	call	0x88	; 0x88 <init_ports>
	
	enable_output();
 108:	0e 94 7e 00 	call	0xfc	; 0xfc <enable_output>
	send_data_1(0x00);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 57 00 	call	0xae	; 0xae <send_data_1>
	send_data_2(0xEE);
 112:	8e ee       	ldi	r24, 0xEE	; 238
 114:	0e 94 64 00 	call	0xc8	; 0xc8 <send_data_2>
	send_data_3(0xFF);
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	0e 94 71 00 	call	0xe2	; 0xe2 <send_data_3>

	return 0;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
